import React, { useState, useEffect } from "react";

// Extend the Window interface to include Google Translate functions
declare global {
  interface Window {
    googleTranslateElementInit: () => void;
    google: {
      translate: {
        TranslateElement: new (options: unknown, elementId: string) => unknown;
      };
    };
  }
}

const App = () => {
  const [showChatbot, setShowChatbot] = useState(false);
  const [messages, setMessages] = useState([
    { text: "Hello! I'm your CropYield Assistant. How can I help you with your farming questions today?", sender: 'bot' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState('en');

  // Function to handle chatbot messages
  const handleSendMessage = () => {
    if (inputMessage.trim() === '') return;

    // Add user message
    const newMessages = [...messages, { text: inputMessage, sender: 'user' }];
    setMessages(newMessages);
    setInputMessage('');

    // Generate bot response after a short delay
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage);
      setMessages([...newMessages, { text: botResponse, sender: 'bot' }]);
    }, 1000);
  };

  const generateBotResponse = (userMessage: string) => {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {
      return "Hello! How can I assist you with your farming queries today?";
    } else if (lowerMessage.includes('yield') || lowerMessage.includes('prediction')) {
      return "Our yield predictions use machine learning models trained on historical data, weather patterns, and soil conditions. You can get a prediction by filling out the form in the Prediction section.";
    } else if (lowerMessage.includes('rice') || lowerMessage.includes('paddy')) {
      return "For rice cultivation, we recommend maintaining proper water levels, using nitrogen-rich fertilizers, and monitoring for common pests like stem borers. The optimal temperature for rice is between 20-35°C.";
    } else if (lowerMessage.includes('weather') || lowerMessage.includes('rain')) {
      return "Our platform integrates real-time weather data to provide accurate predictions. You can check current weather conditions in the Features section.";
    } else if (lowerMessage.includes('soil') || lowerMessage.includes('fertilizer')) {
      return "Soil health is crucial for good yields. We recommend testing your soil every season and using fertilizers based on the nutrient deficiencies. Our platform can provide specific recommendations based on your soil type.";
    } else if (lowerMessage.includes('pest') || lowerMessage.includes('disease')) {
      return "For pest control, we recommend integrated pest management approaches. Regular monitoring, biological controls, and targeted pesticide use can help manage pests effectively while minimizing environmental impact.";
    } else if (lowerMessage.includes('thank')) {
      return "You're welcome! Is there anything else you'd like to know?";
    } else {
      return "I'm here to help with agricultural advice. You can ask me about crop yields, weather impacts, soil health, or pest management. How can I assist you?";
    }
  };

  // Function to show notification
  const showNotification = (message: string, type = 'info') => {
    // You would implement a toast notification system here
    console.log(`${type}: ${message}`);
  };

  // Function to reset form
  const resetForm = () => {
    // You would implement form reset logic here
    console.log("Form reset");
  };

  // Translation function
  const translateText = async (text: string, targetLang: string): Promise<string> => {
    if (targetLang === 'en') return text;
    
    try {
      const response = await fetch(
        `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`
      );
      const data = await response.json();
      return data.responseData.translatedText || text;
    } catch (error) {
      console.error('Translation error:', error);
      return text;
    }
  };

  const applyTranslation = async (lang: string) => {
    setCurrentLanguage(lang);
    
    // Use Google Translate if available
    if (window.google && window.google.translate) {
      const select = document.querySelector<HTMLSelectElement>(".goog-te-combo");
      if (select) {
        select.value = lang;
        select.dispatchEvent(new Event('change'));
      }
    }
    
    console.log(`Language changed to: ${lang}`);
  };

  // Location-based language detection
  useEffect(() => {
    const detectLocationAndSetLanguage = async () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            try {
              const { latitude, longitude } = position.coords;
              const response = await fetch(
                `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`
              );
              const data = await response.json();
              const state = (data.address.state || "").toLowerCase();
              
              let lang = "en";
              if (state.includes("odisha") || state.includes("orissa")) {
                lang = "or"; // Odia
              } else if (state.includes("andhra") || state.includes("telangana")) {
                lang = "te"; // Telugu
              } else if (state.includes("west bengal")) {
                lang = "bn"; // Bengali
              } else if (state.includes("tamil nadu")) {
                lang = "ta"; // Tamil
              } else if (state.includes("karnataka")) {
                lang = "kn"; // Kannada
              } else if (state.includes("kerala")) {
                lang = "ml"; // Malayalam
              } else if (state.includes("hindi") || state.includes("north")) {
                lang = "hi"; // Hindi
              }
              
              await applyTranslation(lang);
            } catch (error) {
              console.error("Location detection failed:", error);
            }
          },
          (error) => {
            console.error("Geolocation error:", error);
          }
        );
      }
    };

    detectLocationAndSetLanguage();
  }, []);

  // Google Translate script loading - simplified approach to avoid TypeScript errors
  // Google Translate script loading - simplified approach to avoid TypeScript errors
useEffect(() => {
  const addGoogleTranslateScript = () => {
    const existingScript = document.querySelector('script[src*="translate.google.com"]');
    if (existingScript) return;

    const script = document.createElement('script');
    script.src = 'https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit';
    script.async = true;
    document.head.appendChild(script);
  };

  // Use a more flexible approach to avoid TypeScript errors
  (window as any).googleTranslateElementInit = () => {
    if ((window as any).google && (window as any).google.translate) {
      new (window as any).google.translate.TranslateElement({
        pageLanguage: 'en',
        includedLanguages: 'en,hi,te,or,ta,kn,ml,bn',
        autoDisplay: false,
        layout: 0  // Use numeric value 0 for SIMPLE layout instead of InlineLayout.SIMPLE
      }, 'google_translate_element');
    }
  };

  addGoogleTranslateScript();
}, []);

  useEffect(() => {
    // Initialize weather data
    setTimeout(() => {
      const tempElement = document.getElementById('weather-temp');
      const humidityElement = document.getElementById('weather-humidity');
      const rainfallElement = document.getElementById('weather-rainfall');
      
      if (tempElement) tempElement.textContent = '32°C';
      if (humidityElement) humidityElement.textContent = '78%';
      if (rainfallElement) rainfallElement.textContent = '45mm';
    }, 1000);
  }, []);

  return (
    <div>
      <meta charSet="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>FARMAI - AI-Powered Crop Yield Prediction</title>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
      <style dangerouslySetInnerHTML={{__html: `
        :root {
            --primary: #2e7d32;
            --secondary: #7cb342;
            --accent: #ffa000;
            --light: #f1f8e9;
            --dark: #1b5e20;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
            background-color: #f8f9fa;
        }

        .navbar {
            background-color: var(--primary);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .navbar-brand {
            font-weight: 700;
            color: white !important;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.85) !important;
            font-weight: 500;
            transition: all 0.3s;
        }

        .nav-link:hover {
            color: white !important;
            transform: translateY(-2px);
        }

        .hero-section {
            position: relative;
            color: white;
            padding: 120px 0;
            text-align: center;
            overflow: hidden;
        }

        #hero-video {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;
            z-index: -1;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            z-index: 0;
        }

        .hero-section .container {
            position: relative;
            z-index: 1;
        }

        .section-title {
            position: relative;
            margin-bottom: 40px;
            font-weight: 700;
            color: var(--dark);
        }

        .section-title:after {
            content: '';
            display: block;
            width: 60px;
            height: 4px;
            background: var(--accent);
            margin: 15px auto;
        }

        .feature-card {
            border-radius: 10px;
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
            border: none;
            margin-bottom: 20px;
            height: 100%;
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .feature-icon {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 20px;
        }

        .btn-primary {
            background-color: var(--primary);
            border-color: var(--primary);
            padding: 10px 25px;
            font-weight: 600;
            border-radius: 30px;
        }

        .btn-primary:hover {
            background-color: var(--dark);
            border-color: var(--dark);
        }

        .btn-outline-primary {
            color: var(--primary);
            border-color: var(--primary);
            padding: 10px 25px;
            font-weight: 600;
            border-radius: 30px;
        }

        .btn-outline-primary:hover {
            background-color: var(--primary);
            color: white;
        }

        .language-selector {
            background-color: var(--light);
            border-radius: 20px;
            padding: 5px 15px;
            border: 1px solid var(--secondary);
        }

        .crop-card {
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s;
        }

        .crop-card:hover {
            transform: scale(1.03);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        footer {
            background-color: var(--dark);
            color: white;
            padding: 60px 0 30px;
        }

        .footer-links a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: color 0.3s;
        }

        .footer-links a:hover {
            color: white;
            text-decoration: underline;
        }

        .social-icon {
            font-size: 1.5rem;
            color: white;
            margin-right: 15px;
            transition: color 0.3s;
        }

        .social-icon:hover {
            color: var(--accent);
        }

        .prediction-form {
            background-color: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary);
        }

        .stat-label {
            font-size: 1.1rem;
            color: #666;
        }

        .result-container {
            background-color: var(--light);
            border-radius: 15px;
            padding: 30px;
            margin-top: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .yield-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary);
        }

        .recommendation-card {
            border-left: 4px solid var(--accent);
        }

        .crop-image {
            height: 200px;
            object-fit: cover;
        }

        .chatbot-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }

        .chatbot-btn {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: all 0.3s;
        }

        .chatbot-btn:hover {
            transform: scale(1.1);
        }

        .chatbot-window {
            position: absolute;
            bottom: 70px;
            right: 0;
            width: 350px;
            height: 450px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chatbot-header {
            background-color: var(--primary);
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            margin-bottom: 10px;
        }

        .bot-message {
            background-color: #e8f5e9;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }

        .user-message {
            background-color: var(--primary);
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }

        .chatbot-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
        }

        .chatbot-input input {
            flex: 1;
            border: none;
            padding: 10px;
            border-radius: 20px;
            background-color: #f5f5f5;
        }

        .chatbot-input button {
            background: none;
            border: none;
            color: var(--primary);
            font-size: 1.2rem;
            margin-left: 10px;
            cursor: pointer;
        }

        .loading-spinner {
            text-align: center;
            padding: 20px;
        }

        .model-info {
            background-color: #e8f5e9;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            font-size: 0.9rem;
        }

        .chart-container {
            margin-top: 30px;
            height: 300px;
        }

        .confidence-badge {
            font-size: 0.9rem;
            padding: 5px 10px;
            border-radius: 15px;
            background-color: var(--secondary);
            color: white;
        }

        .factor-bar {
            height: 8px;
            border-radius: 4px;
            background-color: #e0e0e0;
            margin-bottom: 10px;
        }

        .factor-progress {
            height: 100%;
            border-radius: 4px;
            background-color: var(--primary);
        }

        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .interactive-map {
            border-radius: 15px;
            overflow: hidden;
            height: 400px;
            background-color: #e8f5e9;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 30px;
        }

        .data-card {
            border-radius: 10px;
            overflow: hidden;
            transition: all 0.3s;
        }

        .data-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: var(--primary);
        }

        input:checked + .toggle-slider:before {
            transform: translateX(26px);
        }

        .translate-dropdown {
            padding: 8px 12px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #ccc;
            cursor: pointer;
            background-color: #fff;
        }

        .translate-dropdown:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

        .show {
            display: block !important;
        }

        .flex-show {
            display: flex !important;
        }

        .language-selector select {
            background: transparent;
            border: none;
            color: white;
            padding: 5px;
            outline: none;
            font-size: 1rem;
            cursor: pointer;
        }
        
        .language-selector option {
            background: var(--primary);
            color: white;
        }
      `}} />

      <nav className="navbar navbar-expand-lg navbar-dark sticky-top">
        <div className="container">
          <a className="navbar-brand" href="#">
            <i className="fas fa-seedling me-2" />CropYield Pro
          </a>
          <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span className="navbar-toggler-icon" />
          </button>
          <div className="collapse navbar-collapse" id="navbarNav">
            <ul className="navbar-nav ms-auto">
              <li className="nav-item">
                <a className="nav-link" href="#home">Home</a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#features">Features</a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#prediction">Prediction</a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#crops">Crops</a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#about">About</a>
              </li>
              <li className="nav-item">
                <a className="nav-link" href="#contact">Contact</a>
              </li>
              <li className="nav-item">
                <div className="language-selector">
                  <select 
                    id="language" 
                    onChange={(e) => applyTranslation(e.target.value)}
                    value={currentLanguage}
                  >
                    <option value="en">English</option>
                    <option value="hi">Hindi</option>
                    <option value="or">Odia</option>
                    <option value="te">Telugu</option>
                    <option value="ta">Tamil</option>
                    <option value="kn">Kannada</option>
                    <option value="ml">Malayalam</option>
                    <option value="bn">Bengali</option>
                  </select>
                </div>
                <div id="google_translate_element" style={{display: 'none'}} />
              </li>
            </ul>
          </div>
        </div>
      </nav>

      <section id="home" className="hero-section">
        <video autoPlay loop muted playsInline id="hero-video">
          <source src="Vision\Video.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
        <div className="container">
          <div className="row">
            <div className="col-lg-8 mx-auto">
              <h1 className="display-4 fw-bold mb-4">AI-Powered Crop Yield Prediction</h1>
              <p className="lead mb-4">Maximize your agricultural productivity with our AI-driven platform that
                provides accurate yield predictions and actionable recommendations tailored to your crops and
                regional conditions.</p>
              <a href="#prediction" className="btn btn-lg btn-primary me-2">Get Prediction</a>
              <a href="#features" className="btn btn-lg btn-outline-light">Learn More</a>
            </div>
          </div>
        </div>
      </section>

      {/* Rest of your component remains the same */}
      <section className="py-5 bg-light">
        <div className="container">
          <div className="row text-center">
            <div className="col-md-3 col-6 mb-4 mb-md-0">
              <div className="stat-number">10%</div>
              <div className="stat-label">Average Yield Increase</div>
            </div>
            <div className="col-md-3 col-6 mb-4 mb-md-0">
              <div className="stat-number">5,000+</div>
              <div className="stat-label">Farmers Supported</div>
            </div>
            <div className="col-md-3 col-6">
              <div className="stat-number">15</div>
              <div className="stat-label">Crop Types</div>
            </div>
            <div className="col-md-3 col-6">
              <div className="stat-number">96%</div>
              <div className="stat-label">Prediction Accuracy</div>
            </div>
          </div>
        </div>
      </section>

      {/* ... rest of your existing JSX remains exactly the same ... */}
      
      <footer>
        <div className="container">
          <div className="row">
            <div className="col-lg-4 mb-4 mb-lg-0">
              <h4 className="text-uppercase mb-4">CropYield Pro</h4>
              <p>AI-powered crop yield prediction platform designed to help Odisha farmers maximize their
                agricultural productivity through data-driven insights.</p>
              <div className="mt-3">
                <a href="#" className="social-icon"><i className="fab fa-facebook-f" /></a>
                <a href="#" className="social-icon"><i className="fab fa-twitter" /></a>
                <a href="#" className="social-icon"><i className="fab fa-instagram" /></a>
                <a href="#" className="social-icon"><i className="fab fa-linkedin-in" /></a>
                <a href="#" className="social-icon"><i className="fab fa-youtube" /></a>
              </div>
            </div>
            <div className="col-lg-2 col-md-4 mb-4 mb-md-0">
              <h5 className="text-uppercase mb-4">Quick Links</h5>
              <ul className="list-unstyled footer-links">
                <li className="mb-2"><a href="#home">Home</a></li>
                <li className="mb-2"><a href="#features">Features</a></li>
                <li className="mb-2"><a href="#prediction">Prediction</a></li>
                <li className="mb-2"><a href="#crops">Crops</a></li>
                <li className="mb-2"><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
              </ul>
            </div>
            <div className="col-lg-2 col-md-4 mb-4 mb-md-0">
              <h5 className="text-uppercase mb-4">Resources</h5>
              <ul className="list-unstyled footer-links">
                <li className="mb-2"><a href="#">Blog</a></li>
                <li className="mb-2"><a href="#">FAQs</a></li>
                <li className="mb-2"><a href="#">Tutorials</a></li>
                <li className="mb-2"><a href="#">Research Papers</a></li>
                <li><a href="#">Case Studies</a></li>
              </ul>
            </div>
            <div className="col-lg-4 col-md-4">
              <h5 className="text-uppercase mb-4">Newsletter</h5>
              <p>Subscribe to our newsletter for the latest updates on agricultural technology and tips.</p>
              <form className="footer-newsletter">
                <div className="input-group mb-3">
                  <input type="email" className="form-control" placeholder="Your email address" aria-label="Email" />
                  <button className="btn btn-primary" type="button">Subscribe</button>
                </div>
              </form>
              <div className="app-badges mt-3">
                <p className="mb-2">Download our mobile app:</p>
                <a href="#"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/320px-Google_Play_Store_badge_EN.svg.png" alt="Google Play" /></a>
                <a href="#"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Download_on_the_App_Store_Badge.svg/320px-Download_on_the_App_Store_Badge.svg.png" alt="App Store" /></a>
              </div>
            </div>
          </div>
          <div className="footer-bottom text-center">
            <p className="mb-0">© 2023 CropYield Pro. All rights reserved.</p>
            <div className="mt-2">
              <a href="#" className="text-white me-3">Privacy Policy</a>
              <a href="#" className="text-white me-3">Terms of Service</a>
              <a href="#" className="text-white">Cookie Policy</a>
            </div>
          </div>
        </div>
      </footer>

      <div className="chatbot-container">
        <div className="chatbot-btn" onClick={() => setShowChatbot(!showChatbot)}>
          <i className="fas fa-robot fa-2x" />
        </div>
        {showChatbot && (
          <div className="chatbot-window flex-show">
            <div className="chatbot-header">
              <h5 className="mb-0">CropYield Assistant</h5>
              <button className="btn-close btn-close-white" onClick={() => setShowChatbot(false)} />
            </div>
            <div className="chatbot-messages">
              {messages.map((message, index) => (
                <div key={index} className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}>
                  {message.text}
                </div>
              ))}
            </div>
            <div className="chatbot-input">
              <input 
                type="text" 
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Type your message here..." 
              />
              <button onClick={handleSendMessage}><i className="fas fa-paper-plane" /></button>
            </div>
          </div>
        )}
      </div>

      <div className="toast notification-toast" role="alert" aria-live="assertive" aria-atomic="true" id="notificationToast" style={{display: 'none'}}>
        <div className="toast-header">
          <strong className="me-auto" id="toastTitle">Notification</strong>
          <button type="button" className="btn-close" data-bs-dismiss="toast" aria-label="Close" />
        </div>
        <div className="toast-body" id="toastMessage">
          This is a notification message.
        </div>
      </div>
      
      <div id="google_translate_element" style={{display: 'none'}} />
    </div>
  );
};

export default App;